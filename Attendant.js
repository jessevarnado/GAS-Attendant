// Generated by CoffeeScript 1.7.1
(function() {
  var AttendantOverrides, BaseAttendant, DocumentPropertiesAttendant, LoggerAttendant, PropertiesAttendant, PropertiesServiceAttendant, RangeAttendant, RangeAttendantIterator, RangeColumnIterator, RangeRowIterator, ScriptPropertiesAttendant, SheetAppender, SheetAttendant, SheetIterator, SpreadsheetAppAttendant, SpreadsheetAttendant, TypeHelper, UserPropertiesAttendant, Utilities, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  TypeHelper = (function() {
    function TypeHelper() {}

    TypeHelper.isRange = function(object) {
      return object.toString() === 'Range';
    };

    TypeHelper.isSpreadsheet = function(object) {
      return object.toString() === 'Spreadsheet';
    };

    TypeHelper.isSheet = function(object) {
      return object.toString() === 'Sheet';
    };

    TypeHelper.isScriptProperties = function(object) {
      return object.toString() === 'ScriptProperties';
    };

    TypeHelper.isUserProperties = function(object) {
      return object.toString() === 'UserProperties';
    };

    TypeHelper.isDocumentProperties = function(object) {
      return object.toString() === 'DocumentProperties';
    };

    return TypeHelper;

  })();

  AttendantOverrides = (function() {
    function AttendantOverrides() {}

    AttendantOverrides.override = function(object) {
      switch (false) {
        case !TypeHelper.isRange(object):
          return new RangeAttendant(object);
        case !TypeHelper.isSpreadsheet(object):
          return new SpreadsheetAttendant(object);
        case !TypeHelper.isSheet(object):
          return new SheetAttendant(object);
        case !TypeHelper.isScriptProperties(object):
          return new ScriptPropertiesAttendant(object);
        case !TypeHelper.isUserProperties(object):
          return new UserPropertiesAttendant(object);
        case !TypeHelper.isDocumentProperties(object):
          return new DocumentPropertiesAttendant(object);
        default:
          return object;
      }
    };

    return AttendantOverrides;

  })();

  BaseAttendant = (function() {
    function BaseAttendant(object) {
      this.object = object;
    }

    BaseAttendant.prototype.__noSuchMethod__ = function(id, args) {
      var returnObject;
      if (this.object[id] == null) {
        throw new TypeError;
      }
      returnObject = this.object[id].apply(this.object, args);
      return AttendantOverrides.override(returnObject);
    };

    return BaseAttendant;

  })();

  SheetIterator = (function() {
    function SheetIterator() {}

    SheetIterator.prototype.eachRow = function(callback) {
      return this.getEntireRange().eachRow(callback);
    };

    SheetIterator.prototype.eachRowReverse = function(callback) {
      return this.getEntireRange().eachRowReverse(callback);
    };

    SheetIterator.prototype.eachColumn = function(callback) {
      return this.getEntireRange().eachColumn(callback);
    };

    SheetIterator.prototype.eachColumnReverse = function(callback) {
      return this.getEntireRange().eachColumnReverse(callback);
    };

    SheetIterator.prototype.rowIterator = function() {
      return this.getEntireRange().rowIterator();
    };

    SheetIterator.prototype.columnIterator = function() {
      return this.getEntireRange().columnIterator();
    };

    SheetIterator.prototype.dataRowIterator = function() {
      return this.getDataRange().rowIterator();
    };

    SheetIterator.prototype.dataColumnIterator = function() {
      return this.getDataRange().columnIterator();
    };

    SheetIterator.prototype.eachDataRow = function(callback) {
      return this.getDataRange().eachRow(callback);
    };

    SheetIterator.prototype.eachDataRowReverse = function(callback) {
      return this.getDataRange().eachRowReverse(callback);
    };

    SheetIterator.prototype.eachDataColumn = function(callback) {
      return this.getDataRange().eachColumn(callback);
    };

    SheetIterator.prototype.eachDataColumnReverse = function(callback) {
      return this.getDataRange().eachColumnReverse(callback);
    };

    return SheetIterator;

  })();

  SheetAppender = (function() {
    function SheetAppender() {}

    SheetAppender.prototype.appendRowRuturnRange = function(data) {
      var finder, row, rowIterator, sheet, values;
      sheet = this.appendRow(data);
      rowIterator = sheet.rowIterator().reverse();
      while (rowIterator.hasNext()) {
        row = rowIterator.next();
        values = row.getValues()[0];
        finder = function(value, index) {
          if (data[index] == null) {
            return true;
          }
          return value.valueOf() === data[index].valueOf();
        };
        if (values.every(finder)) {
          return row;
        }
      }
      return null;
    };

    return SheetAppender;

  })();

  SpreadsheetAttendant = (function(_super) {
    __extends(SpreadsheetAttendant, _super);

    function SpreadsheetAttendant() {
      return SpreadsheetAttendant.__super__.constructor.apply(this, arguments);
    }

    SpreadsheetAttendant.prototype.getEntireRange = function() {
      var sheet;
      sheet = this.getActiveSheet();
      return sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns());
    };

    SpreadsheetAttendant.prototype.toString = function() {
      return "SpreadsheetAttendant";
    };

    return SpreadsheetAttendant;

  })(Utilities.mixOf(BaseAttendant, SheetIterator, SheetAppender));

  SheetAttendant = (function(_super) {
    __extends(SheetAttendant, _super);

    function SheetAttendant() {
      return SheetAttendant.__super__.constructor.apply(this, arguments);
    }

    SheetAttendant.prototype.getEntireRange = function() {
      return this.getRange(1, 1, this.getMaxRows(), this.getMaxColumns());
    };

    SheetAttendant.prototype.toString = function() {
      return "SheetAttendant";
    };

    return SheetAttendant;

  })(Utilities.mixOf(BaseAttendant, SheetIterator, SheetAppender));

  RangeAttendant = (function(_super) {
    __extends(RangeAttendant, _super);

    function RangeAttendant() {
      return RangeAttendant.__super__.constructor.apply(this, arguments);
    }

    RangeAttendant.prototype.isBlank = function() {
      var error, row, value, values, _i, _j, _len, _len1;
      try {
        return this.object.isBlank();
      } catch (_error) {
        error = _error;
        LoggerAttendant.debug('Built in Range.isBlank() failed trying backup');
        values = this.getValues();
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          row = values[_i];
          for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
            value = row[_j];
            if (value !== '') {
              return false;
            }
          }
        }
        return true;
      }
    };

    RangeAttendant.prototype.includeAllColumns = function() {
      var rowIndex, sheet;
      sheet = this.getSheet();
      rowIndex = this.getCell(1, 1).getRow();
      return sheet.getRange(rowIndex, 1, this.getNumRows(), sheet.getMaxColumns());
    };

    RangeAttendant.prototype.removeHeader = function() {
      if (this.getRow() === 1) {
        if (this.getNumRows() === 1) {
          return null;
        } else {
          return this.sliceRows(2);
        }
      } else {
        return this;
      }
    };

    RangeAttendant.prototype.sliceRows = function(start, length) {
      return this.slice(start, 1, length);
    };

    RangeAttendant.prototype.sliceColumns = function(start, length) {
      return this.slice(1, start, null, length);
    };

    RangeAttendant.prototype.slice = function(startRow, startColumn, rowLength, columnLength) {
      var startCell;
      if (rowLength == null) {
        rowLength = this.getNumRows() - startRow + 1;
      }
      if (columnLength == null) {
        columnLength = this.getNumColumns() - startColumn + 1;
      }
      if (startRow > this.getNumRows() || startColumn > this.getNumColumns()) {
        return this;
      }
      if (rowLength + startRow > this.getNumRows()) {
        rowLength = this.getNumRows() - startRow + 1;
      }
      if (columnLength + startColumn > this.getNumColumns()) {
        columnLength = this.getNumColumns() - startColumn + 1;
      }
      startCell = this.getCell(startRow, startColumn);
      return this.getSheet().getRange(startCell.getRow(), startCell.getColumn(), rowLength, columnLength);
    };

    RangeAttendant.prototype.rowIterator = function() {
      return new RangeRowIterator(this);
    };

    RangeAttendant.prototype.columnIterator = function() {
      return new RangeColumnIterator(this);
    };

    RangeAttendant.prototype.eachRow = function(callback) {
      var rowIterator, _results;
      rowIterator = this.rowIterator();
      _results = [];
      while (rowIterator.hasNext()) {
        _results.push(callback(rowIterator.next(), rowIterator.currentIndex));
      }
      return _results;
    };

    RangeAttendant.prototype.eachRowReverse = function(callback) {
      var rowIterator, _results;
      rowIterator = this.rowIterator().reverse();
      _results = [];
      while (rowIterator.hasNext()) {
        _results.push(callback(rowIterator.next(), rowIterator.currentIndex));
      }
      return _results;
    };

    RangeAttendant.prototype.eachColumn = function(callback) {
      var columnIterator, _results;
      columnIterator = this.columnIterator();
      _results = [];
      while (columnIterator.hasNext()) {
        _results.push(callback(columnIterator.next(), columnIterator.currentIndex));
      }
      return _results;
    };

    RangeAttendant.prototype.eachColumnReverse = function(callback) {
      var columnIterator, _results;
      columnIterator = this.columnIterator().reverse();
      _results = [];
      while (columnIterator.hasNext()) {
        _results.push(callback(columnIterator.next(), columnIterator.currentIndex));
      }
      return _results;
    };

    return RangeAttendant;

  })(BaseAttendant);

  RangeAttendantIterator = (function() {
    function RangeAttendantIterator(range) {
      this.range = range;
      this.currentIndex = 1;
      this.reversed = false;
    }

    RangeAttendantIterator.prototype.reverse = function() {
      this.currentIndex = this.getSize();
      this.reversed = true;
      return this;
    };

    RangeAttendantIterator.prototype.hasNext = function() {
      if (this.reversed) {
        return this.currentIndex > 0;
      } else {
        return this.currentIndex <= this.getSize();
      }
    };

    RangeAttendantIterator.prototype.getSize = function() {};

    RangeAttendantIterator.prototype.next = function() {};

    RangeAttendantIterator.prototype.startAt = function(index) {
      if ((0 < index && index <= this.getSize())) {
        this.currentIndex = index;
      }
      return this;
    };

    return RangeAttendantIterator;

  })();

  RangeRowIterator = (function(_super) {
    __extends(RangeRowIterator, _super);

    function RangeRowIterator() {
      return RangeRowIterator.__super__.constructor.apply(this, arguments);
    }

    RangeRowIterator.prototype.getSize = function() {
      return this.range.getNumRows();
    };

    RangeRowIterator.prototype.next = function() {
      var columnIndex, firstCell, rowIndex, sheet;
      sheet = this.range.getSheet();
      firstCell = this.range.getCell(this.currentIndex, 1);
      rowIndex = firstCell.getRow();
      columnIndex = firstCell.getColumn();
      if (this.reversed) {
        this.currentIndex--;
      } else {
        this.currentIndex++;
      }
      return sheet.getRange(rowIndex, columnIndex, 1, this.range.getNumColumns());
    };

    return RangeRowIterator;

  })(RangeAttendantIterator);

  RangeColumnIterator = (function(_super) {
    __extends(RangeColumnIterator, _super);

    function RangeColumnIterator() {
      return RangeColumnIterator.__super__.constructor.apply(this, arguments);
    }

    RangeColumnIterator.prototype.getSize = function() {
      return this.range.getNumColumns();
    };

    RangeColumnIterator.prototype.next = function() {
      var columnIndex, firstCell, rowIndex, sheet;
      sheet = this.range.getSheet();
      firstCell = this.range.getCell(1, this.currentIndex);
      rowIndex = firstCell.getRow();
      columnIndex = firstCell.getColumn();
      if (this.reversed) {
        this.currentIndex--;
      } else {
        this.currentIndex++;
      }
      return sheet.getRange(rowIndex, columnIndex, this.range.getNumRows(), 1);
    };

    return RangeColumnIterator;

  })(RangeAttendantIterator);

  PropertiesAttendant = (function() {
    function PropertiesAttendant() {}

    PropertiesAttendant.prototype.getJSONProperty = function(key) {
      return JSON.parse(PropertiesService.getScriptProperties().getProperty(key));
    };

    PropertiesAttendant.prototype.fetchDeepJSONProperty = function() {
      var fields, key, property;
      key = arguments[0], fields = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      property = this.getJSONProperty(key);
      return Utilities.fetchDeep.apply(Utilities, [property].concat(__slice.call(fields)));
    };

    PropertiesAttendant.prototype.setJSONProperty = function(key, value) {
      PropertiesService.getScriptProperties().setProperty(key, JSON.stringify(value));
      return this;
    };

    PropertiesAttendant.prototype.mergePropertyMapping = function(key, map) {
      var mapping;
      mapping = this.getJSONProperty(key);
      if (mapping != null) {
        Utilities.merge(mapping, map);
        this.setJSONProperty(key, mapping);
      } else {
        this.setJSONProperty(key, map);
      }
      return this;
    };

    return PropertiesAttendant;

  })();

  ScriptPropertiesAttendant = (function(_super) {
    __extends(ScriptPropertiesAttendant, _super);

    function ScriptPropertiesAttendant() {
      return ScriptPropertiesAttendant.__super__.constructor.apply(this, arguments);
    }

    return ScriptPropertiesAttendant;

  })(Utilities.mixOf(BaseAttendant, PropertiesAttendant));

  UserPropertiesAttendant = (function(_super) {
    __extends(UserPropertiesAttendant, _super);

    function UserPropertiesAttendant() {
      return UserPropertiesAttendant.__super__.constructor.apply(this, arguments);
    }

    return UserPropertiesAttendant;

  })(Utilities.mixOf(BaseAttendant, PropertiesAttendant));

  DocumentPropertiesAttendant = (function(_super) {
    __extends(DocumentPropertiesAttendant, _super);

    function DocumentPropertiesAttendant() {
      return DocumentPropertiesAttendant.__super__.constructor.apply(this, arguments);
    }

    return DocumentPropertiesAttendant;

  })(Utilities.mixOf(BaseAttendant, PropertiesAttendant));

  PropertiesServiceAttendant = (function() {
    function PropertiesServiceAttendant() {}

    PropertiesServiceAttendant.__noSuchMethod__ = function(id, args) {
      var returnObject;
      if (PropertiesService[id] == null) {
        throw new TypeError;
      }
      returnObject = PropertiesService[id].apply(PropertiesService, args);
      return AttendantOverrides.override(returnObject);
    };

    return PropertiesServiceAttendant;

  })();

  SpreadsheetAppAttendant = (function() {
    function SpreadsheetAppAttendant() {}

    SpreadsheetAppAttendant.DataValidationCriteria = SpreadsheetApp.DataValidationCriteria;

    SpreadsheetAppAttendant.__noSuchMethod__ = function(id, args) {
      var returnObject;
      if (SpreadsheetApp[id] == null) {
        throw new TypeError;
      }
      returnObject = SpreadsheetApp[id].apply(SpreadsheetApp, args);
      return AttendantOverrides.override(returnObject);
    };

    return SpreadsheetAppAttendant;

  })();

  LoggerAttendant = (function() {
    var level;

    function LoggerAttendant() {}

    LoggerAttendant.SEVERITY = {
      UNKNOWN: 5,
      FATAL: 4,
      ERROR: 3,
      WARN: 2,
      INFO: 1,
      DEBUG: 0
    };

    level = LoggerAttendant.SEVERITY.INFO;

    LoggerAttendant.getLevel = function() {
      return level;
    };

    LoggerAttendant.setLevel = function(value) {
      if ((LoggerAttendant.SEVERITY.DEBUG <= value && value <= LoggerAttendant.SEVERITY.UNKNOWN)) {
        return level = value;
      }
    };

    LoggerAttendant.isDebug = function() {
      return LoggerAttendant.getLevel() <= LoggerAttendant.SEVERITY.DEBUG;
    };

    LoggerAttendant.isInfo = function() {
      return LoggerAttendant.getLevel() <= LoggerAttendant.SEVERITY.INFO;
    };

    LoggerAttendant.isWarn = function() {
      return LoggerAttendant.getLevel() <= LoggerAttendant.SEVERITY.WARN;
    };

    LoggerAttendant.isError = function() {
      return LoggerAttendant.getLevel() <= LoggerAttendant.SEVERITY.ERROR;
    };

    LoggerAttendant.isFatal = function() {
      return LoggerAttendant.getLevel() <= LoggerAttendant.SEVERITY.FATAL;
    };

    LoggerAttendant.log = function() {
      var args, formattedMessage, message, severity;
      severity = arguments[0], message = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (severity == null) {
        severity = LoggerAttendant.SEVERITY.UNKNOWN;
      }
      if (message == null) {
        message = '';
      }
      if (severity < LoggerAttendant.getLevel()) {
        return;
      }
      formattedMessage = LoggerAttendant.formatMessage(severity, message);
      return Logger.log.apply(Logger, [formattedMessage].concat(__slice.call(args)));
    };

    LoggerAttendant.formatMessage = function(severity, message) {
      var formattedLevel;
      formattedLevel = (function() {
        switch (severity) {
          case LoggerAttendant.SEVERITY.DEBUG:
            return 'DEBUG';
          case LoggerAttendant.SEVERITY.INFO:
            return 'INFO';
          case LoggerAttendant.SEVERITY.WARN:
            return 'WARN';
          case LoggerAttendant.SEVERITY.ERROR:
            return 'ERROR';
          case LoggerAttendant.SEVERITY.FATAL:
            return 'FATAL';
          default:
            return 'UNKNOWN';
        }
      })();
      return "" + formattedLevel + ": " + message;
    };

    LoggerAttendant.debug = function() {
      var args, message;
      message = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return LoggerAttendant.log.apply(LoggerAttendant, [LoggerAttendant.SEVERITY.DEBUG, message].concat(__slice.call(args)));
    };

    LoggerAttendant.info = function() {
      var args, message;
      message = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return LoggerAttendant.log.apply(LoggerAttendant, [LoggerAttendant.SEVERITY.INFO, message].concat(__slice.call(args)));
    };

    LoggerAttendant.warn = function() {
      var args, message;
      message = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return LoggerAttendant.log.apply(LoggerAttendant, [LoggerAttendant.SEVERITY.WARN, message].concat(__slice.call(args)));
    };

    LoggerAttendant.error = function() {
      var args, message;
      message = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return LoggerAttendant.log.apply(LoggerAttendant, [LoggerAttendant.SEVERITY.ERROR, message].concat(__slice.call(args)));
    };

    LoggerAttendant.fatal = function() {
      var args, message;
      message = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return LoggerAttendant.log.apply(LoggerAttendant, [LoggerAttendant.SEVERITY.FATAL, message].concat(__slice.call(args)));
    };

    return LoggerAttendant;

  })();

  Utilities = (function() {
    function Utilities() {}

    Utilities.merge = function(left, right) {
      var property;
      if (left == null) {
        left = right;
        return left;
      }
      for (property in right) {
        if (Utilities.type(right[property]) === 'object') {
          if (Utilities.type(left[property]) === 'object') {
            left[property] = Utilities.merge(left[property], right[property]);
          } else {
            left[property] = right[property];
          }
        } else {
          left[property] = right[property];
        }
      }
      return left;
    };

    Utilities.reverseMerge = function(left, right) {
      return Utilities.merge(right, left);
    };

    Utilities.type = function(obj) {
      var classToType;
      if (obj === void 0 || obj === null) {
        return String(obj);
      }
      classToType = {
        '[object Boolean]': 'boolean',
        '[object Number]': 'number',
        '[object String]': 'string',
        '[object Function]': 'function',
        '[object Array]': 'array',
        '[object Date]': 'date',
        '[object RegExp]': 'regexp',
        '[object Object]': 'object'
      };
      return classToType[Object.prototype.toString.call(obj)];
    };

    Utilities.fetchDeep = function() {
      var fields, obj, reducer;
      obj = arguments[0], fields = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      reducer = function(prev, curr) {
        return prev[curr];
      };
      return fields.reduce(reducer, obj);
    };

    Utilities.mixOf = function() {
      var Mixed, base, method, mixin, mixins, name, _i, _ref;
      base = arguments[0], mixins = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      Mixed = (function(_super) {
        __extends(Mixed, _super);

        function Mixed() {
          return Mixed.__super__.constructor.apply(this, arguments);
        }

        return Mixed;

      })(base);
      for (_i = mixins.length - 1; _i >= 0; _i += -1) {
        mixin = mixins[_i];
        _ref = mixin.prototype;
        for (name in _ref) {
          method = _ref[name];
          Mixed.prototype[name] = method;
        }
      }
      return Mixed;
    };

    return Utilities;

  })();

  root.SpreadsheetAppAttendant = SpreadsheetAppAttendant;

  root.PropertiesServiceAttendant = PropertiesServiceAttendant;

  root.LoggerAttendant = LoggerAttendant;

}).call(this);
